import React from 'react';
import toast, { Toaster } from 'react-hot-toast';
import { useTheme } from '../../contexts/ThemeContext';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–æ—Å—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π
const createToastOptions = (isDark) => ({
  duration: 4000,
  position: 'top-right',
  style: {
    background: isDark ? '#374151' : '#ffffff',
    color: isDark ? '#f9fafb' : '#111827',
    border: `1px solid ${isDark ? '#4b5563' : '#e5e7eb'}`,
    borderRadius: '8px',
    boxShadow: isDark 
      ? '0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.1)'
      : '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
    fontSize: '14px',
    fontWeight: '400',
    maxWidth: '420px',
  },
  success: {
    iconTheme: {
      primary: '#10b981',
      secondary: isDark ? '#374151' : '#ffffff',
    },
    style: {
      border: `1px solid ${isDark ? '#065f46' : '#10b981'}`,
      background: isDark ? '#064e3b' : '#f0fdf4',
    },
  },
  error: {
    iconTheme: {
      primary: '#ef4444',
      secondary: isDark ? '#374151' : '#ffffff',
    },
    style: {
      border: `1px solid ${isDark ? '#7f1d1d' : '#ef4444'}`,
      background: isDark ? '#7f1d1d' : '#fef2f2',
    },
  },
  loading: {
    iconTheme: {
      primary: isDark ? '#8b5cf6' : '#7c3aed',
      secondary: isDark ? '#374151' : '#ffffff',
    },
  },
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Toaster —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è —Ç–µ–º—ã
export const CustomToaster = () => {
  const { isDark } = useTheme();
  const options = createToastOptions(isDark);

  return (
    <Toaster
      position={options.position}
      toastOptions={options}
      containerStyle={{
        top: 20,
        right: 20,
      }}
    />
  );
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Å—Ç–æ–≤
export const showToast = {
  success: (message, options = {}) => {
    return toast.success(message, {
      duration: 4000,
      ...options
    });
  },

  error: (message, options = {}) => {
    return toast.error(message, {
      duration: 6000,
      ...options
    });
  },

  loading: (message, options = {}) => {
    return toast.loading(message, {
      duration: Infinity,
      ...options
    });
  },

  promise: (promise, messages) => {
    return toast.promise(promise, {
      loading: messages.loading || '–ó–∞–≥—Ä—É–∑–∫–∞...',
      success: messages.success || '–£—Å–ø–µ—à–Ω–æ!',
      error: messages.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
    });
  },

  custom: (content, options = {}) => {
    return toast.custom(content, {
      duration: 4000,
      ...options
    });
  },

  dismiss: (toastId) => {
    if (toastId) {
      toast.dismiss(toastId);
    } else {
      toast.dismiss();
    }
  },
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–æ—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
export const CustomToast = ({ 
  title, 
  message, 
  type = 'default', 
  action,
  onClose 
}) => {
  const { isDark } = useTheme();

  const typeStyles = {
    default: {
      icon: 'üí¨',
      borderColor: isDark ? '#4b5563' : '#e5e7eb',
      bgColor: isDark ? '#374151' : '#ffffff',
    },
    success: {
      icon: '‚úÖ',
      borderColor: isDark ? '#065f46' : '#10b981',
      bgColor: isDark ? '#064e3b' : '#f0fdf4',
    },
    error: {
      icon: '‚ùå',
      borderColor: isDark ? '#7f1d1d' : '#ef4444',
      bgColor: isDark ? '#7f1d1d' : '#fef2f2',
    },
    warning: {
      icon: '‚ö†Ô∏è',
      borderColor: isDark ? '#78350f' : '#f59e0b',
      bgColor: isDark ? '#78350f' : '#fffbeb',
    },
    info: {
      icon: '‚ÑπÔ∏è',
      borderColor: isDark ? '#1e3a8a' : '#3b82f6',
      bgColor: isDark ? '#1e3a8a' : '#eff6ff',
    },
  };

  const currentStyle = typeStyles[type] || typeStyles.default;

  return (
    <div 
      className={`flex items-start space-x-3 p-4 rounded-lg border max-w-sm`}
      style={{
        borderColor: currentStyle.borderColor,
        backgroundColor: currentStyle.bgColor,
      }}
    >
      <div className="flex-shrink-0 text-lg">
        {currentStyle.icon}
      </div>
      
      <div className="flex-1 min-w-0">
        {title && (
          <p className={`font-medium text-sm ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
            {title}
          </p>
        )}
        {message && (
          <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'} ${title ? 'mt-1' : ''}`}>
            {message}
          </p>
        )}
        {action && (
          <div className="mt-3">
            {action}
          </div>
        )}
      </div>

      {onClose && (
        <button
          onClick={onClose}
          className={`flex-shrink-0 rounded-md p-1 ${isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-400 hover:text-gray-500'} focus:outline-none`}
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      )}
    </div>
  );
};

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ—Å—Ç–æ–≤
export const showTradeToast = {
  created: (symbol) => showToast.success(`–°–¥–µ–ª–∫–∞ ${symbol} —Å–æ–∑–¥–∞–Ω–∞!`),
  updated: (symbol) => showToast.success(`–°–¥–µ–ª–∫–∞ ${symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`),
  deleted: (symbol) => showToast.success(`–°–¥–µ–ª–∫–∞ ${symbol} —É–¥–∞–ª–µ–Ω–∞`),
  closed: (symbol) => showToast.success(`–ü–æ–∑–∏—Ü–∏—è ${symbol} –∑–∞–∫—Ä—ã—Ç–∞!`),
  error: (message) => showToast.error(`–û—à–∏–±–∫–∞: ${message}`),
  
  saving: (symbol) => showToast.loading(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${symbol}...`),
  importing: () => showToast.loading('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...'),
  exporting: () => showToast.loading('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF...'),
};

export default CustomToaster; 