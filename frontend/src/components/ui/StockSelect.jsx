import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { useTheme } from '../../contexts/ThemeContext';

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
const POPULAR_STOCKS = [
  { value: 'SBER', label: 'SBER - –°–±–µ—Ä–±–∞–Ω–∫' },
  { value: 'GAZP', label: 'GAZP - –ì–∞–∑–ø—Ä–æ–º' },
  { value: 'LKOH', label: 'LKOH - –õ—É–∫–æ–π–ª' },
  { value: 'YNDX', label: 'YNDX - –Ø–Ω–¥–µ–∫—Å' },
  { value: 'ROSN', label: 'ROSN - –†–æ—Å–Ω–µ—Ñ—Ç—å' },
  { value: 'NVTK', label: 'NVTK - –ù–æ–≤–∞—Ç—ç–∫' },
  { value: 'TCSG', label: 'TCSG - TCS Group' },
  { value: 'PLZL', label: 'PLZL - –ü–æ–ª—é—Å' },
  { value: 'GMKN', label: 'GMKN - –ì–ú–ö –ù–æ—Ä–Ω–∏–∫–µ–ª—å' },
  { value: 'MGNT', label: 'MGNT - –ú–∞–≥–Ω–∏—Ç' },
  { value: 'MTSS', label: 'MTSS - –ú–¢–°' },
  { value: 'RTKM', label: 'RTKM - –†–æ—Å—Ç–µ–ª–µ–∫–æ–º' },
  { value: 'VTBR', label: 'VTBR - –í–¢–ë' },
  { value: 'AFLT', label: 'AFLT - –ê—ç—Ä–æ—Ñ–ª–æ—Ç' },
  { value: 'ALRS', label: 'ALRS - –ê–õ–†–û–°–ê' },
  { value: 'CHMF', label: 'CHMF - –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å' },
  { value: 'NLMK', label: 'NLMK - –ù–õ–ú–ö' },
  { value: 'MAGN', label: 'MAGN - –ú–ú–ö' },
  { value: 'TATN', label: 'TATN - –¢–∞—Ç–Ω–µ—Ñ—Ç—å' },
  { value: 'SNGS', label: 'SNGS - –°—É—Ä–≥—É—Ç–Ω–µ—Ñ—Ç–µ–≥–∞–∑' }
];

const StockSelect = ({ 
  value, 
  onChange, 
  placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏...",
  isRequired = false,
  existingStocks = [],
  ...props 
}) => {
  const { isDark } = useTheme();
  const [inputValue, setInputValue] = useState('');
  const [allOptions, setAllOptions] = useState(POPULAR_STOCKS);

  // –î–æ–±–∞–≤–ª—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ü–∏–∏ –≤ –æ–ø—Ü–∏–∏
  useEffect(() => {
    const existingOptions = existingStocks
      .filter(stock => !POPULAR_STOCKS.some(popular => popular.value === stock))
      .map(stock => ({ value: stock, label: stock }));
    
    setAllOptions([...POPULAR_STOCKS, ...existingOptions]);
  }, [existingStocks]);

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
  const filterOption = (option, inputValue) => {
    if (!inputValue) return true;
    const searchValue = inputValue.toLowerCase();
    return (
      option.value.toLowerCase().includes(searchValue) ||
      option.label.toLowerCase().includes(searchValue)
    );
  };

  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  const customStyles = {
    control: (provided, state) => ({
      ...provided,
      backgroundColor: isDark ? '#374151' : '#ffffff',
      borderColor: state.isFocused 
        ? (isDark ? '#8b5cf6' : '#7c3aed')
        : (isDark ? '#4b5563' : '#d1d5db'),
      boxShadow: state.isFocused 
        ? `0 0 0 1px ${isDark ? '#8b5cf6' : '#7c3aed'}` 
        : 'none',
      '&:hover': {
        borderColor: isDark ? '#6b7280' : '#9ca3af'
      },
      minHeight: '42px'
    }),
    input: (provided) => ({
      ...provided,
      color: isDark ? '#f9fafb' : '#111827',
    }),
    singleValue: (provided) => ({
      ...provided,
      color: isDark ? '#f9fafb' : '#111827',
    }),
    placeholder: (provided) => ({
      ...provided,
      color: isDark ? '#9ca3af' : '#6b7280',
    }),
    menu: (provided) => ({
      ...provided,
      backgroundColor: isDark ? '#374151' : '#ffffff',
      border: `1px solid ${isDark ? '#4b5563' : '#d1d5db'}`,
      boxShadow: isDark 
        ? '0 10px 15px -3px rgba(0, 0, 0, 0.3)' 
        : '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isFocused 
        ? (isDark ? '#4b5563' : '#f3f4f6')
        : (isDark ? '#374151' : '#ffffff'),
      color: isDark ? '#f9fafb' : '#111827',
      '&:hover': {
        backgroundColor: isDark ? '#4b5563' : '#f3f4f6'
      }
    }),
    menuList: (provided) => ({
      ...provided,
      maxHeight: '200px'
    })
  };

  const handleChange = (selectedOption) => {
    onChange(selectedOption ? selectedOption.value : '');
  };

  const handleInputChange = (newInputValue, actionMeta) => {
    if (actionMeta.action === 'input-change') {
      setInputValue(newInputValue);
      
      // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Ç–∏–∫–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –æ–ø—Ü–∏—é
      if (newInputValue && newInputValue.length >= 2) {
        const upperValue = newInputValue.toUpperCase();
        const existsInOptions = allOptions.some(opt => opt.value === upperValue);
        
        if (!existsInOptions) {
          const newOption = { value: upperValue, label: upperValue };
          setAllOptions(prev => [newOption, ...prev]);
        }
      }
    }
  };

  const selectedValue = allOptions.find(option => option.value === value) || null;

  return (
    <div className="relative">
      <Select
        {...props}
        value={selectedValue}
        onChange={handleChange}
        onInputChange={handleInputChange}
        inputValue={inputValue}
        options={allOptions}
        filterOption={filterOption}
        placeholder={placeholder}
        isClearable
        isSearchable
        styles={customStyles}
        noOptionsMessage={({ inputValue }) => 
          inputValue ? `–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${inputValue}"` : '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞'
        }
        loadingMessage={() => '–ó–∞–≥—Ä—É–∑–∫–∞...'}
        className="react-select-container"
        classNamePrefix="react-select"
      />
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ */}
      <div className={`text-xs mt-1 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
        üí° –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
      </div>
    </div>
  );
};

export default StockSelect; 